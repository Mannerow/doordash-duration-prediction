name: CD_DEPLOY

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering of the CD workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repo
        uses: actions/checkout@v3

      # Step 2: Install Prefect
      - name: Install Prefect
        run: pip install prefect

      # Step 3: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Create the kaggle.json file in the working directory
      - name: Create kaggle.json
        run: |
          echo '${{ secrets.KAGGLE_JSON }}' > kaggle.json

      # Step 5: Create a .env file for Docker Compose using the secrets
      - name: Create .env file for Docker Compose
        run: |
          echo "MLFLOW_BACKEND_STORE_URI=${{ secrets.MLFLOW_BACKEND_STORE_URI }}" >> .env
          echo "MLFLOW_DEFAULT_ARTIFACT_ROOT=${{ secrets.MLFLOW_DEFAULT_ARTIFACT_ROOT }}" >> .env
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> .env
          echo "PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY }}" >> .env
          echo "PREFECT_WORKSPACE=${{ secrets.PREFECT_WORKSPACE }}" >> .env
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> .env
          echo "TF_VAR_ecr_repository_name=${{ secrets.TF_VAR_ecr_repository_name }}" >> .env
          echo "TF_VAR_aws_region=${{ secrets.TF_VAR_aws_region }}" >> .env
          echo "TF_VAR_mlflow_models_bucket=${{ secrets.TF_VAR_mlflow_models_bucket }}" >> .env
          echo "TF_VAR_prediction_bucket=${{ secrets.TF_VAR_prediction_bucket }}" >> .env

      # Step 6: Log in to Prefect Cloud
      - name: Log in to Prefect Cloud
        run: |
          prefect cloud login --key ${{ secrets.PREFECT_API_KEY }} --workspace ${{ secrets.PREFECT_WORKSPACE }}

      # Step 7: Build the Docker Image
      - name: Build Docker Image
        run: |
          docker build -f Dockerfile -t ${{ secrets.TF_VAR_ecr_repository_name }}:latest .

      # Step 8: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 9: Tag the Docker Image
      - name: Tag Docker Image
        run: |
          docker tag ${{ secrets.TF_VAR_ecr_repository_name }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.TF_VAR_ecr_repository_name }}:latest

      # Step 10: Push the Docker Image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.TF_VAR_ecr_repository_name }}:latest

      # Step 11: Run Docker Compose to bring up services
      - name: Run Docker Compose
        run: |
          docker compose up -d

      # Final Step: Notify on Successful Deployment
      - name: Notify on Successful Deployment
        run: echo "Deployment completed successfully!"
